apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

buildscript {
	ext.kotlin_version = '1.1.1'
	ext {
		kotlinVersion = '1.1.1'
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
}

idea {
	module {
		name = 'holidayplanner'

		excludeDirs = [file(".gradle")]
		["build", "out", ".gradle", "node_modules"].each {
			excludeDirs << file("$buildDir/$it")
		}

		iml {
			withXml {
				def atts = it.asNode().component.content.sourceFolder
						.find { it.@url == 'file://$MODULE_DIR$/src/main/resources' }
						.attributes()
				atts.remove('isSource')
				atts.put('type', 'java-resource')
			}
		}
	}
}

sourceSets {
	main {
		kotlin {
			srcDirs = ['src/main/kotlin']
		}
		resources {
			srcDirs = ['src/main/resources']
		}
	}

	test {
		kotlin {
			srcDirs = ['src/test/kotlin']
		}
		resources {
			srcDirs = ['src/test/resources']
		}
	}
}

dependencies {
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.2.0')
	compile('org.springframework.session:spring-session')
	compile('org.springframework:spring-web')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-jetty')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.security:spring-security-web:4.2.2.RELEASE')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	compile("org.hamcrest:hamcrest-all:1.3")
	runtime('org.postgresql:postgresql')
	compile('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.mockito:mockito-core:2.7.21')
	compile("org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version")
}

springBoot {
	mainClass = 'org.mboyz.holidayplanner.Server'
}

task createDB(type:Exec) {
	workingDir 'db'
	commandLine './create.sh'
}

applicationName = "holidayplanner"

task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean
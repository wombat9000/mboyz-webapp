buildscript {
	ext {
		kotlinVersion = '1.1.3'
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
		classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
		classpath 'com.h2database:h2:1.4.194'
	}
}

plugins {
	id "com.moowork.gulp" version "1.1.1"
	id "com.moowork.node" version "1.1.1"
	id "org.flywaydb.flyway" version "4.1.2"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

applicationName = "holidayplanner"
mainClassName = "org.mboyz.holidayplanner.Server"
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-starter-jetty"
	compile "org.springframework.boot:spring-boot-starter-thymeleaf"
	compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}"
	compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
	compile "org.hamcrest:hamcrest-all:1.3"
	compile "org.flywaydb:flyway-core:4.1.2"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.8.7"
	compile 'com.auth0:java-jwt:3.2.0'
	compile "org.webjars:bootstrap:3.1.0"
	compile "org.webjars:webjars-locator"

    runtime 'org.postgresql:postgresql'

	testCompile 'org.seleniumhq.selenium:selenium-java:3.4.0'
	testCompile 'com.github.detro:ghostdriver:2.1.0'
	testCompile group: 'com.h2database', name: 'h2', version: '1.4.194'
	testCompile 'org.mockito:mockito-core:2.7.21'
	testCompile 'org.springframework.boot:spring-boot-starter-test'
}

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

test {
	testLogging {
		events "failed"
		exceptionFormat "full"
	}
}

idea {
	module {
		name = 'holidayplanner'

		excludeDirs = [file(".gradle")]
		["build", "out", ".gradle", "node_modules"].each {
			excludeDirs << file("$buildDir/$it")
		}

		iml {
			withXml {
				def atts = it.asNode().component.content.sourceFolder
						.find { it.@url == 'file://$MODULE_DIR$/src/main/resources' }
						.attributes()
				atts.remove('isSource')
				atts.put('type', 'java-resource')
			}
		}
	}
}

flyway {
	if (null == System.getenv("DATABASE_URL")) {
		url = 'jdbc:postgresql://localhost:5432/mboyz'
        user = 'mboyz_app'
    } else {
		def dbUri = new URI(System.getenv("DATABASE_URL"))
        user = dbUri.userInfo.split(":")[0]
        password = dbUri.userInfo.split(":")[1]

        def port = dbUri.getPort()
        def path = dbUri.getPath()
        def host = dbUri.getHost()
        url = "jdbc:postgresql://"+host+":"+port+path
	}

	locations = ["filesystem:src/main/resources/db/migration/"]
}

sourceSets.main.kotlin.srcDirs = ['src/main/kotlin']
sourceSets.main.resources.srcDirs = ['src/main/resources']
sourceSets.test.kotlin.srcDirs = ['src/test/kotlin']
sourceSets.test.resources.srcDirs = ['src/test/resources']

springBoot {
	mainClass = 'org.mboyz.holidayplanner.Server'
}

task buildStaticResources(type: Exec, dependsOn: npmInstall) {
	workingDir "${projectDir}"
	commandLine = ["./node_modules/.bin/gulp", "build"]
}

task createStaticResources(type: Tar, dependsOn: buildStaticResources) {
	archiveName = "static-resources.tar"
	destinationDir = file("${buildDir}/libs")
	def staticsDir = "${projectDir}/src/main/resources/static"

	into("js") {
		from("${staticsDir}/js/") {
			include("*.js")
		}
	}
}

task createDB(type: Exec) {
    workingDir 'db'
    commandLine './create.sh'
}

processResources.dependsOn createStaticResources

jar {
	dependsOn createStaticResources
	from "${buildDir}/libs/static-resources.tar"
}

gulp_jest.dependsOn buildStaticResources
check.dependsOn gulp_jest
task stage(dependsOn: ['clean', 'installDist', 'flywayMigrate'])
installDist.mustRunAfter clean
check.mustRunAfter clean
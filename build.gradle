buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
        kotlinVersion = '1.1.51'
    }
    repositories {
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'com.h2database:h2:1.4.194'
    }
}

repositories {
    maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

group = 'org.mboyz.holidayplanner'
mainClassName = "org.mboyz.holidayplanner.Server"
sourceCompatibility = 1.8

dependencies {
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-jetty"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    compile "org.hamcrest:hamcrest-all:1.3"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.8.7"
    compile group: 'com.h2database', name: 'h2', version: '1.4.194'

    testCompile 'org.seleniumhq.selenium:selenium-java:3.4.0'
    testCompile 'org.mockito:mockito-core:2.7.21'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

idea {
    module {
        excludeDirs = [file(".gradle")]
        ["build", "out", ".gradle", "node_modules"].each {
            excludeDirs << file("$buildDir/$it")
        }

        iml.withXml {
            def resourceAtts = it.asNode().component.content.sourceFolder
                    .find { it.@url == 'file://$MODULE_DIR$/src/main/resources' }
                    .attributes()
            resourceAtts.remove('isSource')
            resourceAtts.put('type', 'java-resource')

            def testResourceAtts = it.asNode().component.content.sourceFolder
                    .find { it.@url == 'file://$MODULE_DIR$/src/test/resources' }
                    .attributes()
            testResourceAtts.remove('isSource')
            testResourceAtts.put('type', 'java-test-resource')
        }
    }
}

sourceSets.main.kotlin.srcDirs = ['src/main/kotlin']
sourceSets.main.resources.srcDirs = ['src/main/resources']
sourceSets.test.kotlin.srcDirs = ['src/test/kotlin']
sourceSets.test.resources.srcDirs = ['src/test/resources']

springBoot {
    mainClass = 'Server'
}

task createStaticResources(type: Tar) {
    archiveName = "static-resources.tar"
    destinationDir = file("${buildDir}/libs")
    def staticsDir = "${projectDir}/src/main/resources/static"

    into("js") {
        from("${staticsDir}/js/") {
            include("*.js")
        }
    }
}

processResources.dependsOn createStaticResources

jar {
    dependsOn createStaticResources
    from "${buildDir}/libs/static-resources.tar"
}

task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean
check.mustRunAfter clean